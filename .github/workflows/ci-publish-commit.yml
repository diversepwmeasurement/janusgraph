jobs:
  commit-publish:
    permissions:
      contents: read
      packages: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-

          '
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-package: jdk
        java-version: 8.0.382+5
    - continue-on-error: true
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - continue-on-error: true
      name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
    - continue-on-error: true
      name: Login to Github Registry
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io
        username: ${{ github.actor }}
    - continue-on-error: true
      name: Remove version SNAPSHOT suffix if exists
      run: mvn versions:set -DremoveSnapshot=true -DgenerateBackupPoms=false
    - continue-on-error: true
      name: Set JanusGraph version environment variable
      run: 'export JG_VER="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-$(date
        ''+%Y%m%d-%H%M%S'').$(git rev-parse --short HEAD)"

        export JG_DESCRIPTION="Janusgraph commit release. Commit $(git rev-parse HEAD).
        Branch $(git rev-parse --abbrev-ref HEAD). Version $JG_VER."

        export MULTI_PLATFORM="true"

        echo "JG_VER=${JG_VER}" >> $GITHUB_ENV

        echo "JG_DESCRIPTION=${JG_DESCRIPTION}" >> $GITHUB_ENV

        echo "MULTI_PLATFORM=${MULTI_PLATFORM}" >> $GITHUB_ENV

        '
    - continue-on-error: true
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
      name: Configure GPG Key
      run: 'echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import

        '
    - continue-on-error: true
      env:
        MASTER_PASSWORD: ${{ secrets.MASTER_PASSWORD }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      name: Set OSSR credentials
      run: 'mkdir -p ~/.m2/

        echo "<settingsSecurity><master>$MASTER_PASSWORD</master></settingsSecurity>"
        > ~/.m2/settings-security.xml

        echo "<settings><servers><server><id>ossrh</id><username>$OSSRH_USERNAME</username><password>$OSSRH_PASSWORD</password></server></servers></settings>"
        > ~/.m2/settings.xml

        '
    - continue-on-error: true
      name: Setup unique version
      run: mvn versions:set -DnewVersion="$JG_VER" -DgenerateBackupPoms=false
    - continue-on-error: true
      name: Make JanusGraph JAR artifacts
      run: mvn clean install -Pjanusgraph-release -DskipTests=true
    - continue-on-error: true
      name: Deploy JanusGraph JAR artifacts into staging repository
      run: mvn deploy -Pjanusgraph-release,janusgraph-commit-release -DskipTests=true
        -DautoReleaseAfterClose=true -Ddescription="$JG_DESCRIPTION" -DstagingDescription="$JG_DESCRIPTION"
name: CI Release commit artifacts
on:
  repository_dispatch:
    types: trigger-ga___ci-publish-commit.yml
