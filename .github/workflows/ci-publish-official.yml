jobs:
  build-all:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-package: jdk
        java-version: 8.0.382+5
    - continue-on-error: true
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - continue-on-error: true
      name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
    - continue-on-error: true
      name: Login to Github Registry
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io
        username: ${{ github.actor }}
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        architecture: x64
        python-version: 3.8
    - continue-on-error: true
      name: Install pip3
      run: sudo apt-get update && sudo apt-get install -y python3-pip
    - continue-on-error: true
      name: Set JanusGraph versions environment variables
      run: 'export RELEASE_TAG=${{github.ref_name}}

        export JG_VER="${RELEASE_TAG//v/}"

        export JG_DIST_NAME="janusgraph-${JG_VER}"

        export JG_FULL_DIST_NAME="janusgraph-full-${JG_VER}"

        export JG_DOC_DIST_NAME="${JG_DIST_NAME}-doc"

        export MULTI_PLATFORM="true"

        echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

        echo "JG_VER=${JG_VER}" >> $GITHUB_ENV

        echo "JG_DIST_NAME=${JG_DIST_NAME}" >> $GITHUB_ENV

        echo "JG_FULL_DIST_NAME=${JG_FULL_DIST_NAME}" >> $GITHUB_ENV

        echo "JG_DOC_DIST_NAME=${JG_DOC_DIST_NAME}" >> $GITHUB_ENV

        echo "MULTI_PLATFORM=${MULTI_PLATFORM}" >> $GITHUB_ENV

        '
    - continue-on-error: true
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
      name: Configure GPG Key
      run: 'echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import

        '
    - continue-on-error: true
      env:
        MASTER_PASSWORD: ${{ secrets.MASTER_PASSWORD }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      name: Set OSSR credentials
      run: 'mkdir -p ~/.m2/

        echo "<settingsSecurity><master>$MASTER_PASSWORD</master></settingsSecurity>"
        > ~/.m2/settings-security.xml

        echo "<settings><servers><server><id>ossrh</id><username>$OSSRH_USERNAME</username><password>$OSSRH_PASSWORD</password></server></servers></settings>"
        > ~/.m2/settings.xml

        '
    - continue-on-error: true
      name: Make JanusGraph JAR artifacts
      run: mvn clean install -Pjanusgraph-release -DskipTests=true
    - continue-on-error: true
      name: Print content of the generated target directory for debugging purposes
      run: echo $(ls janusgraph-dist/target/)
    - continue-on-error: true
      name: Deploy JanusGraph JAR artifacts into staging repository
      run: mvn deploy -Pjanusgraph-release -DskipTests=true
    - continue-on-error: true
      name: Sign JanusGraph full distribution artifact
      run: gpg --armor --detach-sign --yes janusgraph-dist/target/${JG_FULL_DIST_NAME}.zip
    - continue-on-error: true
      name: Install requirements to build documentation
      run: pip3 install -r requirements.txt
    - continue-on-error: true
      name: Build documentation
      run: mkdocs build
    - continue-on-error: true
      name: Pack documentation into zip
      run: 'mv site ${JG_DOC_DIST_NAME}

        zip -r ${JG_DOC_DIST_NAME}.zip ${JG_DOC_DIST_NAME}

        '
    - continue-on-error: true
      name: Sign documentation artifact
      run: gpg --armor --detach-sign ${JG_DOC_DIST_NAME}.zip
    - continue-on-error: true
      name: Check distribution signature
      run: gpg --verify janusgraph-dist/target/${JG_DIST_NAME}.zip.asc janusgraph-dist/target/${JG_DIST_NAME}.zip
    - continue-on-error: true
      name: Check full distribution signature
      run: gpg --verify janusgraph-dist/target/${JG_FULL_DIST_NAME}.zip.asc janusgraph-dist/target/${JG_FULL_DIST_NAME}.zip
    - continue-on-error: true
      name: Check documentation signature
      run: gpg --verify ${JG_DOC_DIST_NAME}.zip.asc ${JG_DOC_DIST_NAME}.zip
    - continue-on-error: true
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifactErrorsFailBuild: true
        artifacts: KEYS,${{ env.JG_DOC_DIST_NAME }}.zip.asc,${{ env.JG_DOC_DIST_NAME
          }}.zip,janusgraph-dist/target/${{ env.JG_DIST_NAME }}.zip.asc,janusgraph-dist/target/${{
          env.JG_DIST_NAME }}.zip,janusgraph-dist/target/${{ env.JG_FULL_DIST_NAME
          }}.zip.asc,janusgraph-dist/target/${{ env.JG_FULL_DIST_NAME }}.zip,target/bom.json,target/bom.xml
        body: "# Version ${{ env.JG_VER }} (MM DD, YYYY)\n![Number of release downloads](https://img.shields.io/github/downloads/JanusGraph/janusgraph/${{\
          \ env.RELEASE_TAG }}/total.svg)\n\nFull documentation can be found at https://docs.janusgraph.org/\n\
          \n```xml\n<dependency>\n   <groupId>org.janusgraph</groupId>\n   <artifactId>janusgraph-core</artifactId>\n\
          \   <version>${{ env.JG_VER }}</version>\n</dependency>\n```\n\nFor more\
          \ information on features and bug fixes in ${{env.JG_VER}}, see [this GitHub\
          \ milestone](https://github.com/JanusGraph/janusgraph/milestone/*MILESTONE_NUMBER*?closed=1).\n"
        draft: true
        name: ${{ env.JG_VER }}
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        owner: janusgraph
        prerelease: true
        replacesArtifacts: true
        tag: ${{ env.RELEASE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
name: CI Release official artifacts
on:
  repository_dispatch:
    types: trigger-ga___ci-publish-official.yml
